# Process each sample separately to create a list of data frames
seq_df <- lapply(sample_names, function(sn) {
# Select relevant columns for the current sample
cc <- c("chr", "chr_pos", "ref", "alt", "causes", "classes",
colnames(seq_results)[grepl(paste0(sn, "."),
colnames(seq_results), fixed = TRUE)])
# Rename columns and add sample_name column
seq_results[, cc] %>%
`colnames<-`(c("chr", "chr_pos", "ref", "alt", "causes", "classes",
"occurences", "coverage", "VAF")) %>%
dplyr::mutate(sample_name = sn)
}) %>% do.call("bind_rows", .)
# Rename and reorder columns
seq_df %>%
dplyr::rename(from = chr_pos, DP = coverage,
NV = occurences) %>%
dplyr::mutate(to = from)
}
validate_chromosomes <- function(seq_res, chromosomes) {
seq_res_chrs <- (seq_res["chr"] %>% unique())[,1]
if (is.null(chromosomes)) {
chromosomes <- seq_res_chrs
} else {
unknown_chrs <- dplyr::setdiff(chromosomes, seq_res_chrs)
if (length(unknown_chrs)>0) {
unknown_chrs_str <- paste0(unknown_chrs, collapse = ", ")
if (length(unknown_chrs)>1) {
msg <- paste0("The chromosomes ", unknown_chrs_str, " are")
} else {
msg <- paste0("The chromosome ", unknown_chrs_str, " is")
}
stop(paste0(msg, " not present in the sequence reference data."))
}
}
return(chromosomes)
}
seq_to_long <- function(seq_results) {
# Extract sample names from column names
sample_names <- strsplit(colnames(seq_results)[grepl(".VAF",
colnames(seq_results),
fixed = TRUE)],
".VAF") %>% unlist()
# Process each sample separately to create a list of data frames
seq_df <- lapply(sample_names, function(sn) {
# Select relevant columns for the current sample
cc <- c("chr", "chr_pos", "ref", "alt", "causes", "classes",
colnames(seq_results)[grepl(paste0(sn, "."),
colnames(seq_results), fixed = TRUE)])
# Rename columns and add sample_name column
seq_results[, cc] %>%
`colnames<-`(c("chr", "chr_pos", "ref", "alt", "causes", "classes",
"occurences", "coverage", "VAF")) %>%
dplyr::mutate(sample_name = sn)
}) %>% do.call("bind_rows", .)
# Rename and reorder columns
seq_df %>%
dplyr::rename(from = chr_pos, DP = coverage,
NV = occurences) %>%
dplyr::mutate(to = from)
}
plot_DR <- function(
seq_res,
sample,
chromosomes = NULL,
N = 5000) {
chromosomes <- validate_chromosomes(seq_res, chromosomes)
data <- seq_to_long(seq_res) %>%
dplyr::mutate(chr = factor(chr, levels = chromosomes)) %>%
dplyr::filter(chr %in% chromosomes)
normal_data <- data %>% dplyr::filter(sample_name == "normal_sample")
if (!sample %in% unique(data$sample_name)) {
stop(paste("Inserted 'sample' is not available, available samples are:",
paste0(unique(data$sample_name), collapse = ", ")))
}
tumour_data <- data %>% dplyr::filter(sample_name == sample)
Ntotal <- nrow(tumour_data)
N = min(N, Ntotal)
d <- tumour_data %>%
dplyr::left_join(normal_data, suffix = c(".tumour", ".normal"),
by = c("chr", "from", "ref", "alt")) %>%
dplyr::mutate(DR = DP.tumour / DP.normal) %>%
dplyr::sample_n(N) %>%
dplyr::arrange(chr, from) %>%
dplyr::mutate(abs_pos = 1:dplyr::n())
chr_limits <- d %>%
dplyr::group_by(chr) %>%
dplyr::filter(abs_pos == min(abs_pos)) %>%
dplyr::pull(abs_pos)
chr_limits <- c(chr_limits, max(d$abs_pos))
chr_means <- d %>%
dplyr::group_by(chr) %>%
dplyr::summarise(mean_pos = (max(abs_pos) + min(abs_pos)) / 2) %>%
dplyr::pull(mean_pos)
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = DR)) +
ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
alpha = 0.2) +
ggplot2::geom_vline(xintercept = chr_limits, linetype = "solid",
alpha = 0.4) +
ggplot2::geom_point(size = 0.2, alpha = 0.3) +
ggplot2::labs(x = "", y = "DR") +
ggplot2::lims(y = c(0, NA)) +
ggplot2::theme_bw() +
ggplot2::scale_x_continuous(breaks = chr_means,
labels = unique(d$chr))
}
plot_BAF <- function(
seq_res,
sample,
chromosomes = NULL,
cuts = c(0, 1),
N = 5000) {
chromosomes <- validate_chromosomes(seq_res, chromosomes)
data <- seq_to_long(seq_res) %>%
dplyr::mutate(chr = factor(chr, levels = chromosomes)) %>%
dplyr::filter(chr %in% chromosomes)
if (!sample %in% unique(data$sample_name)) {
stop(paste("Inserted 'sample' is not available, available samples are:",
paste0(unique(data$sample_name), collapse = ", ")))
}
tumour_data <- data %>% dplyr::filter(sample_name == sample)
Ntotal <- nrow(tumour_data)
N = min(N, Ntotal)
d <- tumour_data %>%
#dplyr::group_by(chr) %>%
dplyr::sample_n(N) %>%
#dplyr::ungroup() %>%
dplyr::arrange(chr, from) %>%
dplyr::mutate(abs_pos = 1:dplyr::n()) %>%
dplyr::filter(VAF <= max(cuts), VAF >= min(cuts))
chr_limits <- d %>%
dplyr::group_by(chr) %>%
dplyr::filter(abs_pos == min(abs_pos)) %>%
dplyr::pull(abs_pos)
chr_limits <- c(chr_limits, max(d$abs_pos))
chr_means <- d %>%
dplyr::group_by(chr) %>%
dplyr::summarise(mean_pos = (max(abs_pos) + min(abs_pos)) / 2) %>%
dplyr::pull(mean_pos)
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF)) +
ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
alpha = 0.2) +
ggplot2::geom_vline(xintercept = chr_limits, linetype = "solid",
alpha = 0.4) +
ggplot2::geom_point(size = 0.2, alpha = 0.3) +
ggplot2::labs(x = "", y = "BAF") +
ggplot2::lims(y = c(0, 1)) +
ggplot2::theme_bw() +
ggplot2::scale_x_continuous(breaks = chr_means, labels = unique(d$chr))
}
plot_VAF <- function(seq_res, sample,
chromosomes = NULL,
cuts = c(0, 1), N = 5000) {
chromosomes <- validate_chromosomes(seq_res, chromosomes)
data <- seq_to_long(seq_res) %>%
dplyr::mutate(chr = factor(chr, levels = chromosomes)) %>%
dplyr::filter(chr %in% chromosomes)
if (!sample %in% unique(data$sample_name)) {
stop(paste("Inserted 'sample' is not available, available samples are:",
paste0(unique(data$sample_name), collapse = ", ")))
}
tumour_data <- data %>% dplyr::filter(sample_name == sample)
Ntotal = nrow(tumour_data)
N = min(N, Ntotal)
d <- tumour_data %>%
dplyr::arrange(chr, from) %>%
#dplyr::group_by(chr) %>%
dplyr::sample_n(N) %>%
#dplyr::ungroup() %>%
dplyr::mutate(abs_pos = 1:dplyr::n()) %>%
dplyr::filter(VAF <= max(cuts), VAF >= min(cuts))
chr_limits <- d %>%
dplyr::group_by(chr) %>%
dplyr::filter(abs_pos == min(abs_pos)) %>%
dplyr::pull(abs_pos)
chr_limits <- c(chr_limits, max(d$abs_pos))
chr_means <- d %>%
dplyr::group_by(chr) %>%
dplyr::summarise(mean_pos = (max(abs_pos) + min(abs_pos)) / 2) %>%
dplyr::pull(mean_pos)
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF)) +
ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
alpha = 0.2) +
ggplot2::geom_vline(xintercept = chr_limits, linetype = "solid",
alpha = 0.4) +
ggplot2::geom_point(size = 0.5, alpha = 0.4) +
ggplot2::labs(x = "", y = "VAF") +
ggplot2::lims(y = c(0, 1)) +
ggplot2::theme_bw() +
ggplot2::scale_x_continuous(breaks = chr_means, labels = unique(d$chr))
}
samples <- c('Sample.A', 'Sample.B', 'Sample.C', 'Sample.D')
chromosomes <- validate_chromosomes(seq_res, chromosomes)
library(dplyr)
chromosomes <- validate_chromosomes(seq_res, chromosomes)
chromosomes = NULL
chromosomes <- validate_chromosomes(seq_res, chromosomes)
chromosomes
data <- seq_to_long(seq_res) %>%
dplyr::mutate(chr = factor(chr, levels = chromosomes)) %>%
dplyr::filter(chr %in% chromosomes)
if (!sample %in% unique(data$sample_name)) {
stop(paste("Inserted 'sample' is not available, available samples are:",
paste0(unique(data$sample_name), collapse = ", ")))
}
sample = 'Sample.A'
if (!sample %in% unique(data$sample_name)) {
stop(paste("Inserted 'sample' is not available, available samples are:",
paste0(unique(data$sample_name), collapse = ", ")))
}
tumour_data <- data %>% dplyr::filter(sample_name == sample)
Ntotal = nrow(tumour_data)
N = min(N, Ntotal)
d <- tumour_data %>%
dplyr::arrange(chr, from) %>%
#dplyr::group_by(chr) %>%
dplyr::sample_n(N) %>%
#dplyr::ungroup() %>%
dplyr::mutate(abs_pos = 1:dplyr::n()) %>%
dplyr::filter(VAF <= max(cuts), VAF >= min(cuts))
Ntotal = nrow(tumour_data)
N = 5000)
N = 5000
cuts = c(0, 1)
N = min(N, Ntotal)
d <- tumour_data %>%
dplyr::arrange(chr, from) %>%
#dplyr::group_by(chr) %>%
dplyr::sample_n(N) %>%
#dplyr::ungroup() %>%
dplyr::mutate(abs_pos = 1:dplyr::n()) %>%
dplyr::filter(VAF <= max(cuts), VAF >= min(cuts))
d
chr_limits <- d %>%
dplyr::group_by(chr) %>%
dplyr::filter(abs_pos == min(abs_pos)) %>%
dplyr::pull(abs_pos)
chr_limits <- c(chr_limits, max(d$abs_pos))
chr_means <- d %>%
dplyr::group_by(chr) %>%
dplyr::summarise(mean_pos = (max(abs_pos) + min(abs_pos)) / 2) %>%
dplyr::pull(mean_pos)
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF)) +
ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
alpha = 0.2) +
ggplot2::geom_vline(xintercept = chr_limits, linetype = "solid",
alpha = 0.4) +
ggplot2::geom_point(size = 0.5, alpha = 0.4) +
ggplot2::labs(x = "", y = "VAF") +
ggplot2::lims(y = c(0, 1)) +
ggplot2::theme_bw() +
ggplot2::scale_x_continuous(breaks = chr_means, labels = unique(d$chr))
chr_limits
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF))
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF)) +
ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
alpha = 0.2)
chr_means
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF)) +
ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
alpha = 0.2) +
ggplot2::geom_vline(xintercept = chr_limits, linetype = "solid",
alpha = 0.4) +
ggplot2::geom_point(size = 0.5, alpha = 0.4)
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF)) +
#ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
alpha = 0.2) +
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF)) +
#ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
#alpha = 0.2) +
#ggplot2::geom_vline(xintercept = chr_limits, linetype = "solid",
#alpha = 0.4) +
ggplot2::geom_point(size = 0.5, alpha = 0.4)
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF)) +
#ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
#alpha = 0.2) +
ggplot2::geom_vline(xintercept = chr_limits, linetype = "solid",
alpha = 0.4) +
ggplot2::geom_point(size = 0.5, alpha = 0.4)
chr_limits
d %>%
dplyr::group_by(chr) %>%
dplyr::filter(abs_pos == min(abs_pos))
tumour_data %>%
dplyr::arrange(chr, from) %>%
#dplyr::group_by(chr) %>%
dplyr::sample_n(N) %>%
#dplyr::ungroup() %>%
dplyr::mutate(abs_pos = 1:dplyr::n())
tumour_data %>%
dplyr::arrange(chr, from)
d <- tumour_data %>%
dplyr::arrange(chr, from) %>%
#dplyr::group_by(chr) %>%
dplyr::sample_n(N) %>%
#dplyr::ungroup() %>%
dplyr::mutate(abs_pos = 1:dplyr::n()) %>%
dplyr::filter(VAF <= max(cuts), VAF >= min(cuts))
d
tumour_data %>%
dplyr::arrange(chr, from)
tumour_data %>%
dplyr::arrange(chr, from) %>%
#dplyr::group_by(chr) %>%
dplyr::sample_n(N) %>%
#dplyr::ungroup() %>%
dplyr::mutate(abs_pos = 1:dplyr::n())
tumour_data %>%
#dplyr::group_by(chr) %>%
dplyr::sample_n(N) %>%
dplyr::arrange(chr, from) %>%
#dplyr::ungroup() %>%
dplyr::mutate(abs_pos = 1:dplyr::n()) %>%
dplyr::filter(VAF <= max(cuts), VAF >= min(cuts))
d <- tumour_data %>%
#dplyr::group_by(chr) %>%
dplyr::sample_n(N) %>%
dplyr::arrange(chr, from) %>%
#dplyr::ungroup() %>%
dplyr::mutate(abs_pos = 1:dplyr::n()) %>%
dplyr::filter(VAF <= max(cuts), VAF >= min(cuts))
chr_limits <- d %>%
dplyr::group_by(chr) %>%
dplyr::filter(abs_pos == min(abs_pos)) %>%
dplyr::pull(abs_pos)
chr_limits <- c(chr_limits, max(d$abs_pos))
chr_means <- d %>%
dplyr::group_by(chr) %>%
dplyr::summarise(mean_pos = (max(abs_pos) + min(abs_pos)) / 2) %>%
dplyr::pull(mean_pos)
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF)) +
#ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
#alpha = 0.2) +
ggplot2::geom_vline(xintercept = chr_limits, linetype = "solid",
alpha = 0.4) +
ggplot2::geom_point(size = 0.5, alpha = 0.4) +
ggplot2::labs(x = "", y = "VAF") +
ggplot2::lims(y = c(0, 1)) +
ggplot2::theme_bw() +
ggplot2::scale_x_continuous(breaks = chr_means, labels = unique(d$chr))
d %>%
ggplot2::ggplot(mapping = ggplot2::aes(x = abs_pos, y = VAF)) +
ggplot2::geom_vline(xintercept = chr_means, linetype = "dashed",
alpha = 0.2) +
ggplot2::geom_vline(xintercept = chr_limits, linetype = "solid",
alpha = 0.4) +
ggplot2::geom_point(size = 0.5, alpha = 0.4) +
ggplot2::labs(x = "", y = "VAF") +
ggplot2::lims(y = c(0, 1)) +
ggplot2::theme_bw() +
ggplot2::scale_x_continuous(breaks = chr_means, labels = unique(d$chr))
devtools::install_github("caravagnalab/CNAqc@development")
librray(ggpubr)
libray(ggpubr)
library(ggpubr)
data("ToothGrowth")
df <- ToothGrowth
df$dose <- as.factor(df$dose)
# Create some plots
# ::::::::::::::::::::::::::::::::::::::::::::::::::
# Box plot
bxp <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
# Dot plot
dp <- ggdotplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
# Density plot
dens <- ggdensity(df, x = "len", fill = "dose", palette = "jco")
# Arrange
# ::::::::::::::::::::::::::::::::::::::::::::::::::
ggarrange(bxp, dp, dens, ncol = 2, nrow = 2)
# Arrange
# ::::::::::::::::::::::::::::::::::::::::::::::::::
ggarrange(bxp, dp, dens, ncol = 2, nrow = 2) %>%
ggexport(filename = 'Desktop/prova.png')
# Arrange
# ::::::::::::::::::::::::::::::::::::::::::::::::::
ggarrange(plotlist = c(bxp, dp, dens), ncol = 2, nrow = 2) %>%
ggexport(filename = 'Desktop/prova.png')
# Arrange
# ::::::::::::::::::::::::::::::::::::::::::::::::::
ggarrange(c(bxp, dp, dens), ncol = 2, nrow = 2) %>%
ggexport(filename = 'Desktop/prova.png')
ggexport(plotlist = c(bxp, dp, dens), filename = 'Desktop/prova.png')
ggexport(plotlist = c(bxp, dp, dens), filename = 'Desktop/prova.png')
ggexport(plotlist = c(bxp, dp, dens), filename = '~/Desktop/prova.png')
ggexport(c(bxp, dp, dens), filename = '~/Desktop/prova.png')
ggexport(c(bxp, dp, dens), filename = '~/Desktop/h_prova.png')
c(bxp, dp, dens)
ggexport(c(bxp, dp, dens), filename = '~/Desktop/h_prova.png')
ggexport(c(bxp, dp, dens), filename = '~/Desktop/pp/h_prova.png')
ggexport(c(bxp, dp, dens), filename = '~/Desktop/pp/prova.png', width = 200, height = 300)
ggexport(plotlist = c(bxp, dp, dens), filename = '~/Desktop/pp/prova.png', width = 200, height = 300)
library(ggpubr)
data("ToothGrowth")
df <- ToothGrowth
df$dose <- as.factor(df$dose)
# Create some plots
# ::::::::::::::::::::::::::::::::::::::::::::::::::
# Box plot
bxp <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
# Dot plot
dp <- ggdotplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
# Density plot
dens <- ggdensity(df, x = "len", fill = "dose", palette = "jco")
ggexport(plotlist = c(bxp, dp, dens), filename = '~/Desktop/pp/prova.png', width = 200, height = 300)
library("cowplot")
plot_grid(bxp, dp, bp + rremove("x.text"),
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
plot_grid(bxp, dp, dens + rremove("x.text"),
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
p <- plot_grid(bxp, dp, dens + rremove("x.text"),
ncol = 2, nrow = 2)
p
ggsave(p, 'Desktop/prova.png')
ggsave(plot = p, 'Desktop/prova.png')
p <- plot_grid(plotlist = c(bxp, dp, dens),
ncol = 2, nrow = 2)
p
p <- plot_grid(plotlist = c(bxp, dp, dens))
p
p <- plot_grid(plotlist = list(bxp, dp, dens))
p
ggsave(plot = p, 'Desktop/prova.png')
p <- plot_grid(plotlist = list(bxp, dp, dens), nrow = 1)
ggsave(plot = p, 'Desktop/prova.png')
library(rRACES)
# Default constructor
sim <- SpatialSimulation(
name = 'test',
width = 500,
height = 500,
save_snapshots = FALSE,
seed = 1992
)
s_pos = .2
lambda_n = 100*.6
omega_n = 100*1e-5
omega_p = 100*1e-3
sim$add_mutant(
name = "C",
epigenetic_rates = c("+-" = omega_n, "-+" = omega_p),
growth_rates = c("+" = lambda_n*(1+s_pos), "-" = lambda_n),
death_rates = c("+" = 0.0, "-" = 0.0)
)
sim$place_cell("C-", 250, 250)
sim$run_up_to_size("C-", 1000)
plot_tissue(sim)
# We locate a random cell
cell <- sim$choose_cell_in("C")
# Add mutant
s_driver = .2
sim$add_mutant(
name = "S1",
epigenetic_rates = c("+-" = omega_n, "-+" = omega_p),
growth_rates = c("+" = lambda_n*(1+s_driver)*(1+s_pos), "-" = lambda_n*(1+s_driver)),
death_rates = c("+" = 0.0, "-" = 0.0)
)
# Mutant injection
sim$mutate_progeny(cell, "S1")
# sim$run_up_to_size("S1-", 1000)
sim$run_up_to_event("switch", "S1-", 1)
current = plot_tissue(sim, num_of_bins = 250)
plot_muller(sim)
# Sampling
# We collect a squared box of (bbox_width x bbox_width) cells
bbox_width <- -25
# Box 1
bbox1_p <- c(500, 500)
bbox1_q <- bbox1_p + bbox_width
# View the boxe
current +
ggplot2::geom_rect(xmin = bbox1_p[1], xmax = bbox1_q[2],
ymin = bbox1_p[1], ymax = bbox1_q[2],
fill = NA, color = "black")
# collect up to 1000 tumour cells randomly selected over the whole tissue
sim$sample_cells("T1", num_of_cells = 2500)
# sim$sample_cells("T1", bottom_left = bbox1_p, top_right = bbox1_q)
bbox = sim$search_sample(c("S1-" = 100), 50, 50)
sim$sample_cells("T1_1", bbox$lower_corner, bbox$upper_corner, 200)
plot_tissue(sim)
forest <- sim$get_samples_forest()
plot_forest(forest) %>%
annotate_forest(forest)
library(dplyr)
plot_forest(forest) %>%
annotate_forest(forest)
plot_tissue(sim)
# Mutations
m_engine <- MutationEngine(
directory = "GRCh38",
reference_src = './GRCh38/reference.fasta',
SBS_signatures_src = './GRCh38/SBS_signatures.txt',
indel_signatures_src =  './GRCh38/indel_signatures.txt',
drivers_src = './GRCh38/drivers.txt',
passenger_CNAs_src = './GRCh38/passenger_CNAs.txt',
germline_src = './GRCh38/germline_data')
setwd("~/Documents/GitHub/LOCATE/notes")
